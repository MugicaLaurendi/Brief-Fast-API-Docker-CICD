name: Python Project CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip" 
      - run: pip install ruff
      - run: ruff check .


  test:
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies locally
        run: |
          python -m pip install --upgrade pip
          pip install -r application/requirements.txt

      - name: Run tests with pytest
        run: pytest tests/
      
      - name: Upload pytest test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports-${{ matrix.python-version }}
          path: pytest-report-${{ matrix.python-version }}.xml
        

  build_and_push:
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
      packages: write
    env:
      DB_HOST: database
      DB_USER: ${{ secrets.POSTGRES_USER }}
      DB_PASS: ${{ secrets.POSTGRES_PASSWORD }}
      DB_NAME: ${{ secrets.POSTGRES_DB }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Run Docker Compose
        run: docker compose -f docker-compose.yml up -d
        if: always()
        
      - name: Compose ps
        if: always()
        run: docker compose -f docker-compose_test.yml ps

      - name: DB logs
        if: always()
        run: docker compose -f docker-compose_test.yml logs --no-color --timestamps database

      - name: Dump failing container inspect (health)
        if: always()
        run: |
          CID=$(docker compose -f docker-compose_test.yml ps -q database)
          [ -n "$CID" ] && docker inspect "$CID" --format '{{json .State}}' | jq .

      - name: Compute lowercase image tag
        run: |
          REPO_LC="${GITHUB_REPOSITORY,,}"      
          echo "IMAGE=ghcr.io/${REPO_LC}:latest" >> $GITHUB_ENV


      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: application         
          file: application/Dockerfile   
          tags: ${{ env.IMAGE }}
          push: true

      - name: Stop services
        run: docker compose -f docker-compose.yml down -v



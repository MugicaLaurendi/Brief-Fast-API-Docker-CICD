name: Python Project CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  lint:
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: "pip" 
    - run: pip install ruff
    - run: ruff check .

  test:
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies locally
        run: |
          python -m pip install --upgrade pip
          pip install -r application/requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Now run docker-compose commands
      - name: Run tests with Docker Compose
        run: docker compose -f docker-compose_test.yml up -d
          
    #name: Run tests inside container
      #run: docker-compose -f docker-compose.test.yml exec -T backend pytest --junitxml=pytest-report.xml

      - name: Run tests with pytest
        run: pytest tests/


      # Optionnel: Sauvegarder le rapport de test
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-reports-${{ matrix.python-version }}
          path: pytest-report-${{ matrix.python-version }}.xml
        # 'if: always()' garantit que cette étape s'exécute même si les tests échouent,
        # pour que vous puissiez toujours récupérer le rapport.
        if: always()


      - name: Stop services
        if: always()
        run: docker compose -f docker-compose_test.yml down -v

